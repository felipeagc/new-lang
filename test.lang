fn extern vararg printf(arg: *u8);

fn print_int(x: u64) {
	var n = x;
	var i = u32(0);
	while (i < 8) {
		printf("%02x", (n >> ((7 - i) * 8)) & 0xff);
		i = i + 1;
	}
	printf("\n");
}

// type S struct {
// 	a: i32,
// 	b: f64,
// };
// 
// type P struct {
// 	a: i32,
// 	b: i32,
// 	c: f64,
// 	d: f64,
// };
// 
// fn func1(p1: i32, p2: i32, p3: i32, p4: i32, p5: i32, s1: P): S {
// 	printf("%f\n", s1.c);
// 	s: S;
// 	s.b = 123;
// 	return s;
// }

type MyInt distinct i32;

fn export main() {
	// p: P;
	// p.c = 3;
	// p2 := func1(1, 2, 3, 4, 5, p);
	// printf("%f\n", p2.b);

	// b := u64(2);
	// c := &b;
	// a := u64(8) / b;
	// printf("%d\n", i32(a));

	// a := i32(123);
	// b := a + 321;

	// printf("@sizeof(usize) = %d\n", i32(@sizeof(usize)));
	// s: usize = 1231;

	// if (@defined("linux")) {
	// 	printf("Linux\n");
	// }
	// var my_int2 = MyInt(123);
	// var is_linux = @defined("linux") == true;
	// var not_linux: bool = is_linux == false;
	// if (not_linux) {
	// 	printf("Not linux\n");
	// }

	// when (@defined("linux") or @defined("no")) {
	// 	printf("Compiling 1\n");
	// } else {
	// 	printf("Compiling 2\n");
	// }

	// if (is_linux and my_int2 > MyInt(1)) {
	// 	printf("hey\n");
	// }

	// if (not_linux or my_int2 > MyInt(1)) {
	// 	printf("hey again\n");
	// }

	// print_int(0xFF00000000000000);
	// print_int(0xffffffffffffffff);

    var a: f64 = -123;
    var b: u32 = u32(a);
    var c: f64 = f64(b);
    printf("%f\n", c);
}
