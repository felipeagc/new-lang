def extern malloc(size: u64): *void;
def extern free(ptr: *void);
def extern vararg printf(_: *u8): i32;
def extern puts(_: *u8): i32;
def extern putchar(_: i32): i32;
 
def derp(str: *u8) {
	printf(str);
}

global my_global: i32;
global my_global1: i8;
global my_global2: i16;
global my_global3: i32;
global my_global4: i64;

// def test1() {
// 	arr: [3]u64;
// 	arr[0] = 1;
// 	arr[arr[0]] = 3;
// 
// 	// printf("arr[0] = %lu\n", arr[0]);
// 	// printf("arr[arr[0]] = %lu\n", arr[arr[0]]);
// 	// printf("arr[1] = %lu\n", arr[1]);
// }

def export main(argc: i32, argv: **u8) {
	// a := i32(1);
	// text: [2]i32;
	// text[0] = 48;
	// text[1] = 49;
	// putchar(text[0]);
	// putchar(text[1]);
	// putchar(10);
	// printf("hello\n");

	{
		a := i32(1);
		b := &a;
	}

	{
		a := i32(48);
		b := a;
		b = 49;
		putchar(a);
		putchar(b);
		putchar(10);

		my_global1 = 0x7f;
		my_global1 = 0xff;

		my_global2 = 0x7fff;
		my_global2 = 0xffff;

		my_global3 = 0x7fffffff;
		my_global3 = 0xffffffff;

		my_global4 = 0x7fffffffffffffff;
		my_global4 = 0xffffffffffffffff;
	}

	// test1();

	{
		a: i32 = 321 + 123;
		printf("a = %d\n", a);

		b: i32 = a * 2 + 1;
		printf("b = %d\n", b);
	}

	my_global = argc;
	printf("my_global: %d\n", my_global);

	arr: [12]i32;
	arr[0] = 48;
	arr[1] = 49;
	arr[1] = arr[0] + 2;
	arr[2] = 10;

	putchar(arr[0]);
	putchar(arr[1]);
	putchar(arr[2]);

	first := &arr[0];
	first.* = 55;

	arr_ptr := &arr;
	putchar(arr_ptr.*[0]);
	putchar(arr_ptr.*[1]);
	putchar(arr_ptr.*[2]);

	a := i32(123);
	a = arr[0];
	arr[0] = a;
	arr[0] = a;
	b := f64(123);
	d := b;
	c: *f64 = &b;

	c = &d;
	c = &f64(321);

	msg: *u8 = "hello 1\n";
	derp(msg);
	msg = "hello 2\n";
	derp(msg);

	alloc_ptr := @ptrcast(*i32, malloc(@sizeof(i32)));
	alloc_ptr.* = 321;
	printf("alloc_ptr.* = %d\n", alloc_ptr.*);
	alloc_ptr.* = 123;
	printf("alloc_ptr.* = %d\n", alloc_ptr.*);

	free(@ptrcast(*void, alloc_ptr));

	{
		derp("hey\n");
		printf("hello, world!\n");
	}
}

// def export main() {
// 	// a: u64 = 123;
// 	// b: u64 = 123;
// 	// a = 321;
// 
// 	a: u64 = 123;
// 	b := &a;
// 	c := a;
// 
// 	f := f32(123);
// 
// 	int := i32(50);
// 
// 	msg: *u8 = "hello";
// 	printf("hello\n");
// 	putchar(48);
// 	putchar(49);
// 	putchar(int);
// 	putchar(10);
// 
// 	printf("%lf", f64(123));
// 	putchar(10);
// }
