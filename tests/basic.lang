def extern malloc(size: u64): *void;
def extern free(ptr: *void);
def extern vararg printf(_: *u8);

global my_global: i32;

def factorial(n: i32): i32 {
	if (n <= i32(0)) return 0;
	if (n == i32(1)) return 1;
	return n * factorial(n-1);
}

def export main() {
	printf("Hello, world!\n");
	printf("%d\n", i32(123));

	{
		i := i32(0);
		while (i < i32(10)) {
			printf("iter %d\n", i);
			i = i + 1;
		}
	}

	{
		ptr := @ptrcast(*i32, malloc(@sizeof(i32)));
		ptr.* = 1;
		printf("ptr.* = %d\n", ptr.*);
		ptr.* = 2;
		printf("ptr.* = %d\n", ptr.*);
		free(@ptrcast(*void, ptr));
	}

	{
		array: [32]i32;
		printf("@sizeof(i32) = %d\n", i32(@sizeof(i32)));
		printf("@sizeof([32]i32) = %d\n", i32(@sizeof([32]i32)));

		array[0] = 1;
		printf("array[0] = %d\n", array[0]);
		array[0] = 2;
		printf("array[0] = %d\n", array[0]);
		array[1] = 3;
		printf("array[1] = %d\n", array[1]);
		printf("array[0] = %d\n", array[0]);

		elem_ptr := &array[0];
		elem_ptr.* = 1337;
		printf("array[0] = %d\n", array[0]);
	}

	{
		array_ptr := @ptrcast(*[32]i32, malloc(@sizeof([32]i32)));

		array_ptr.*[0] = 1;
		printf("array_ptr.*[0] = %d\n", array_ptr.*[0]);
		array_ptr.*[0] = 2;
		printf("array_ptr.*[0] = %d\n", array_ptr.*[0]);
		array_ptr.*[1] = 3;
		printf("array_ptr.*[1] = %d\n", array_ptr.*[1]);
		printf("array_ptr.*[0] = %d\n", array_ptr.*[0]);

		free(@ptrcast(*void, array_ptr));
	}

	{
		a := i32(1);
		b := i32(2);
		printf("1 + 2 = %d\n", a + b);
		a = 2;
		b = 5;
		printf("2 + 5 = %d\n", a + b);
		c := &a;
		c.* = 100;
		printf("100 + 5 = %d\n", a + b);
		c.* = b;
		printf("5 + 5 = %d\n", a + b);
	}

	{
		my_global = 123;
		printf("my_global = %d\n", my_global);
		addr := &my_global;
		addr.* = 321;
		printf("my_global = %d\n", my_global);
		if (addr.* > i32(10)) {
			printf("my_global > 10\n");
		}
		if (addr.* < i32(10)) {
			printf("DO NOT PRINT\n");
		}
	}

	{
		printf("factorial(10) = %d\n", factorial(10));
	}

	{
		printf(
			"@sizeof(struct{a i32}) = %d\n",
			i32(@sizeof(struct { a i32 })),
		);
		printf(
			"@sizeof(struct{a i32, b i64}) = %d\n",
			i32(@sizeof(struct { a i32, b i64 })),
		);
	}

	{
		s: struct {
			a i32,
			b i64,
		};
		s.a = 123;
		printf("s.a = %d\n", s.a);
		s.b = 321;
		printf("s.b = %ld\n", s.b);
		ptr := &s.a;
		ptr.* = i32(s.b);
		s.b = 123;
		printf("s.a = %d\n", s.a);
		printf("s.b = %ld\n", s.b);
	}

	{
		type LocalType struct {
			a [2]i32,
			b i64,
		};

		printf("@sizeof(LocalType) = %d\n", i32(@sizeof(LocalType)));

		global local_global: LocalType;
		local_global.a[0] = 321;
		local_global.a[1] = 123;
		printf("local_global.a[0] = %d\n", local_global.a[0]);
		printf("local_global.a[1] = %d\n", local_global.a[1]);
	}
}
