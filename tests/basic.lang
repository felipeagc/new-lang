def extern malloc(size: u64): *void;
def extern free(ptr: *void);
def extern vararg printf(_: *u8);

global my_global: i32;

def factorial(n: i32): i32 {
	if (n <= i32(0)) return 0;
	if (n == i32(1)) return 1;
	return n * factorial(n-1);
}

def test_stack_params(
	s1: i32, s2: i32, s3: i32,
	s4: i32, s5: i32, s6: i32,
	s7: i32, s8: i32, // stack parameters
	f1: f64, f2: f64, f3: f64, f4: f64,
	f5: f64, f6: f64, f7: f64, f8: f64,
	f9: f64, f10: f64, // stack parameters
) {
	printf("register params: %d %d %d %d %d %d\n", s1, s2, s3, s4, s5, s6);
	printf("stack params: %d %d\n", s7, s8);
	printf(
		"register params: %.1lf %.1lf %.1lf %.1lf %.1lf %.1lf %.1lf %.1lf\n",
		f1, f2, f3, f4, f5, f6, f7, f8,
	);
	printf(
		"stack params: %.1lf %.1lf\n",
		f9, f10,
	);
}

type StructParam struct {
	a: i32,
	b: i32,
	c: i32,
	d: i32,
	e: i32,
};

def test_large_params(s: StructParam) {
	printf("s.a = %d, s.b = %d, s.c = %d\n", s.a, s.b, s.c);
}

def export main() {
	printf("Hello, world!\n");
	printf("%d\n", i32(123));

	{
		i := i32(0);
		while (i < i32(10)) {
			printf("iter %d\n", i);
			i = i + 1;
		}
	}

	{
		ptr := @ptrcast(*i32, malloc(@sizeof(i32)));
		ptr.* = 1;
		printf("ptr.* = %d\n", ptr.*);
		ptr.* = 2;
		printf("ptr.* = %d\n", ptr.*);
		free(@ptrcast(*void, ptr));
	}

	{
		array: [32]i32;
		printf("@sizeof(i32) = %d\n", i32(@sizeof(i32)));
		printf("@sizeof([32]i32) = %d\n", i32(@sizeof([32]i32)));

		array[0] = 1;
		printf("array[0] = %d\n", array[0]);
		array[0] = 2;
		printf("array[0] = %d\n", array[0]);
		array[1] = 3;
		printf("array[1] = %d\n", array[1]);
		printf("array[0] = %d\n", array[0]);

		elem_ptr := &array[0];
		elem_ptr.* = 1337;
		printf("array[0] = %d\n", array[0]);
	}

	{
		array_ptr := @ptrcast(*[32]i32, malloc(@sizeof([32]i32)));

		array_ptr.*[0] = 1;
		printf("array_ptr.*[0] = %d\n", array_ptr.*[0]);
		array_ptr.*[0] = 2;
		printf("array_ptr.*[0] = %d\n", array_ptr.*[0]);
		array_ptr.*[1] = 3;
		printf("array_ptr.*[1] = %d\n", array_ptr.*[1]);
		printf("array_ptr.*[0] = %d\n", array_ptr.*[0]);

		free(@ptrcast(*void, array_ptr));
	}

	{
		a := i32(1);
		b := i32(2);
		printf("1 + 2 = %d\n", a + b);
		a = 2;
		b = 5;
		printf("2 + 5 = %d\n", a + b);
		c := &a;
		c.* = 100;
		printf("100 + 5 = %d\n", a + b);
		c.* = b;
		printf("5 + 5 = %d\n", a + b);
	}

	{
		my_global = 123;
		printf("my_global = %d\n", my_global);
		addr := &my_global;
		addr.* = 321;
		printf("my_global = %d\n", my_global);
		if (addr.* > i32(10)) {
			printf("my_global > 10\n");
		}
		if (addr.* < i32(10)) {
			printf("DO NOT PRINT\n");
		}
	}

	{
		printf("factorial(10) = %d\n", factorial(10));
	}

	{
		printf(
			"@sizeof(struct{a: i32}) = %d\n",
			i32(@sizeof(struct {a: i32})),
		);
		printf(
			"@sizeof(struct{a: i32, b: i64}) = %d\n",
			i32(@sizeof(struct {a: i32, b: i64})),
		);
	}

	{
		s: struct {
			a: i32,
			b: i64,
		};
		s.a = 123;
		printf("s.a = %d\n", s.a);
		s.b = 321;
		printf("s.b = %ld\n", s.b);
		ptr := &s.a;
		ptr.* = i32(s.b);
		s.b = 123;
		printf("s.a = %d\n", s.a);
		printf("s.b = %ld\n", s.b);
	}

	{
		type LocalType struct {
			a: [2]i32,
			b: i64,
		};

		printf("@sizeof(LocalType) = %d\n", i32(@sizeof(LocalType)));

		global local_global: LocalType;
		local_global.a[0] = 321;
		local_global.a[1] = 123;
		printf("local_global.a[0] = %d\n", local_global.a[0]);
		printf("local_global.a[1] = %d\n", local_global.a[1]);
	}

	{
		test_stack_params(
			1, 2, 3, 4, 5, 6, 7, 8,
			1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
		);
	}

	{
		type S struct {
			a: i32,
			b: i32,
			c: i32,
		};

		a: S;
		a.a = 1;
		a.b = 2;
		a.c = 3;

		b: S;
		b.a = 4;
		b.b = 5;
		b.c = 6;

		printf("a.a = 1, a.b = 2, a.c = 3\n", a.a, a.b, a.c);

		a = b;
		printf("a.a = 4, a.b = 5, a.c = 6\n", a.a, a.b, a.c);

		global g: S;
		g.a = 7;
		g.b = 8;
		g.c = 9;

		b = g;

		printf("g.a = 7, g.b = 8, g.c = 9\n", g.a, g.b, g.c);
		g = a;
		printf("g.a = 4, g.b = 5, g.c = 6\n", g.a, g.b, g.c);

		printf("b.a = 7, b.b = 8, b.c = 9\n", b.a, b.b, b.c);
	}

	{
		s: StructParam;
		s.a = 111;
		s.b = 222;
		s.c = 333;

		test_large_params(s);
	}
}
